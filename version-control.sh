#!/usr/bin/env bash

set -ex

source vauban-config.sh
source utils.sh
source vauban-backend.sh

[ "$(whoami)" != "root" ] && run_as_root

function main() {
    if [[ -z "$_arg_master" ]] || [[ -z $_arg_image ]] || [[ -z $_arg_tag ]]; then
        die "All arguments must be supplied" 1
    fi
    full_name="$_arg_image:$_arg_tag"
    docker pull "$full_name"
    build_rootfs "$full_name"
    upload "$_arg_master" "" "rootfs.tgz"

    # Changing deployed tag
    set_deployed "$_arg_image" "$_arg_tag"
}

# ARG_OPTIONAL_SINGLE([tag],[t],[The docker tag])
# ARG_OPTIONAL_SINGLE([image],[i],[The docker image])
# ARG_OPTIONAL_SINGLE([master],[m],[The master name])

# ARG_HELP([This script switches between rootfs/conffs versions. It doesn't build anything, just uses cache+registry to deploy])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='timh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_tag=
_arg_image=
_arg_master=


print_help()
{
	printf '%s\n' "This script switches between rootfs/conffs versions. It doesn't build anything, just uses cache+registry to deploy"
	printf 'Usage: %s [-t|--tag <arg>] [-i|--image <arg>] [-m|--master <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "-t, --tag: The docker tag (no default)"
	printf '\t%s\n' "-i, --image: The docker image (no default)"
	printf '\t%s\n' "-m, --master: The master name (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_tag="$2"
				shift
				;;
			--tag=*)
				_arg_tag="${_key##--tag=}"
				;;
			-t*)
				_arg_tag="${_key##-t}"
				;;
			-i|--image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_image="$2"
				shift
				;;
			--image=*)
				_arg_image="${_key##--image=}"
				;;
			-i*)
				_arg_image="${_key##-i}"
				;;
			-m|--master)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_master="$2"
				shift
				;;
			--master=*)
				_arg_master="${_key##--master=}"
				;;
			-m*)
				_arg_master="${_key##-m}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


main

# ] <-- needed because of Argbash
